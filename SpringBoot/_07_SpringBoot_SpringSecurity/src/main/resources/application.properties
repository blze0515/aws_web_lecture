#설정들을 정의하고 설정 클래스에서 가져가서 쓰는 형태
#hikari cp database Connection
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/studydb?serverTimezone=Asia/Seoul
spring.datasource.hikari.username=study
spring.datasource.hikari.password=!ezen1234
spring.datasource.hikari.connection-test-query=SELECT 1

#Connection Pool Properties
#hikaricp에서는 최대 풀과 평상시 풀의 개수를 일치시켜야 최고의 성능을 낼 수 있다. 
spring.datasource.hikari.maximum-pool-size=30
spring.datasource.hikari.minimum-idle=30
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000

#Encoding UTF-8
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=false

#JPA Properties
#어떤 DB를 사용할 건지 지정
spring.jpa.database=mysql
#JPA에서 사용할 쿼리 구문 또는 문법(DBMS마다 문법이 조금씩 다르기 때문에)
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#DDL(Create, Drop)전략 지정
#create: 어플리케이션이 실행될 때 무조건 테이블 삭제 후 재생성
#create-drop: 테이블 삭제 시점이 어플리케이션 종료 시점(나머지는 create와 동일하게 동작)
#update: 변경된 스키마 내용(테이블관련, 데이터(행))만 반영. 테이블을 삭제했다가 재생성하지 않음.
#validate: 변경된 스키마 내용(테이블관련)만 반영.
#none: ddl-auto기능을 사용하지 않음
#처음에는 create로 테이블을 생성해주고 데이터가 인서트된 후에는 update로 변경해서 사용
spring.jpa.hibernate.ddl-auto=update
#JPA에 의해 만들어진 쿼리 콘솔에 출력 여부
spring.jpa.show-sql=true
#쿼리를 출력할 때 출력할 형식 지정(사람이 인식하기 쉽게 형식화됨)
spring.jpa.properties.hibernate.format_sql=true
#엔티티 객체를 카멜케이스로 생성하면 DB에서 자동으로 스네이크케이스로 전환되는 옵션
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy

server.port=9090

#파일 업로드 사이즈 설정(기본값 : 10MB)
#파일 업로드 한 파일당 최대 크기
spring.servlet.multipart.max-file-size=30MB
#파일 업로드 한 번에 올릴수 있는 최대 크기
spring.servlet.multipart.max-request-size=100MB






















